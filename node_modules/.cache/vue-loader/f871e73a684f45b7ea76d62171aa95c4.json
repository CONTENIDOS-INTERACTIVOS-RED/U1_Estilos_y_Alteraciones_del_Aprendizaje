{"remainingRequest":"/home/runner/work/U1_Estilos_y_Alteraciones_del_Aprendizaje/U1_Estilos_y_Alteraciones_del_Aprendizaje/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U1_Estilos_y_Alteraciones_del_Aprendizaje/U1_Estilos_y_Alteraciones_del_Aprendizaje/src/views/curso/Tema4.vue?vue&type=template&id=6f67fecd&lang=pug&","dependencies":[{"path":"/home/runner/work/U1_Estilos_y_Alteraciones_del_Aprendizaje/U1_Estilos_y_Alteraciones_del_Aprendizaje/src/views/curso/Tema4.vue","mtime":1751772485697},{"path":"/home/runner/work/U1_Estilos_y_Alteraciones_del_Aprendizaje/U1_Estilos_y_Alteraciones_del_Aprendizaje/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Estilos_y_Alteraciones_del_Aprendizaje/U1_Estilos_y_Alteraciones_del_Aprendizaje/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U1_Estilos_y_Alteraciones_del_Aprendizaje/U1_Estilos_y_Alteraciones_del_Aprendizaje/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U1_Estilos_y_Alteraciones_del_Aprendizaje/U1_Estilos_y_Alteraciones_del_Aprendizaje/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Estilos_y_Alteraciones_del_Aprendizaje/U1_Estilos_y_Alteraciones_del_Aprendizaje/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}